Test for MyList class

Importing class
    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
    >>> m = __import__("7-base_geometry").__doc__
    >>> len(m) > 1
    True

Checking for class docstring:
    >>> f = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(f) > 1
    True

Checking for function docstring:
    >>> f = __import__("7-base_geometry").BaseGeometry.area.__doc__
    >>> len(f) > 1
    True

Checking for function docstring:
    >>> f = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> len(f) > 1
    True

Checking for PEP8:
    >>> import os
    >>> os.popen("pep8 7-base_geometry.py").read()
    ''

Checking for last blank line:
    >>> os.popen("cat -e 7-base_geometry.py | tail -1").read()[-1]
    '\n'

Main file check:
    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

    >>> try:
    >>>     bg.integer_validator("name", "John")
    >>> except Exception as e:
    >>>     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    >>>     bg.integer_validator("age", 0)
    >>> except Exception as e:
    >>>     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    >>>     bg.integer_validator("distance", -4)
    >>> except Exception as e:
    >>>     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0
